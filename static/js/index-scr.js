const now = new Date().getTime();
userSession = JSON.parse(localStorage.getItem("user_session"))
if (now < userSession?.expiry) {

}
else {
    window.location.href = './static/page/login.html';
}

function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

// Hi·ªÉn th·ªã t√™n
var posNameMain = ""
if (localStorage.getItem("pos_name") == "Cs") {
    posNameMain = "ChƒÉm s√≥c kh√°ch h√†ng"
}
else if (localStorage.getItem("pos_name") == "Doctor") {
    posNameMain = "B√°c sƒ©"
}
else if (localStorage.getItem("pos_name") == "Admin") {
    posNameMain = "Admin"
}
else if (localStorage.getItem("pos_name") == "Nurse") {
    posNameMain = "ƒêi·ªÅu d∆∞·ª°ng"
}
else if (localStorage.getItem("pos_name") == "Community") {
    posNameMain = "Ph√°t tri·ªÉn c·ªông ƒë·ªìng"
}
document.getElementById("userName").innerHTML = capitalizeFirstLetter(localStorage.getItem("local_name")) + "<br>" + posNameMain

// ƒêƒÉng xu·∫•t
const signout = document.querySelector("#sign-out");
function logout(event) {
    firebase.auth().signOut()
        .then(() => {
            // Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
            // window.location.href = "login.html"; // Ho·∫∑c b·∫•t k·ª≥ trang n√†o b·∫°n mu·ªën
            localStorage.removeItem("user_session")
            localStorage.removeItem("local_name")
            localStorage.removeItem("pos_name")
            window.location.href = './static/page/login.html';
            return
        })
        .catch((error) => {
            alert("C√≥ l·ªói x·∫£y ra khi ƒëƒÉng xu·∫•t:", error);
        });
}
signout.addEventListener("submit", logout);


// Check th√™m menu ph√¢n quy·ªÅn
db.collection("accounts").doc(userSession.user.uid).get().then((doc) => {
    const roleCheck = (doc.data().role == "admin")
    localStorage.setItem("roleKey", doc.data().role)
    document.getElementById("menuList").innerHTML += roleCheck ? `
        <li class="nav-item">
            <a class="nav-link" href="./static/page/checkaccount.html" id="adminRole">Ph√¢n quy·ªÅn</a>
        </li>`: ""
    document.getElementById("examSession").innerHTML += roleCheck ? `<button class="btn btn-primary my-3" data-bs-toggle="modal" data-bs-target="#addModal" id="addRoute">Th√™m ƒê·ª£t
            Kh√°m</button>`: ""
}).catch((error) => {
    console.log("Error getting document:", error);
});
const roleKey = localStorage.getItem("roleKey")
localStorage.removeItem("roleKey")


// T·∫°o toast
function showToast(message, type = "success") {
    const toastElement = document.getElementById("toast");
    const toastBody = toastElement.querySelector(".toast-body");

    // X√≥a c√°c class m√†u tr∆∞·ªõc ƒë√≥
    toastElement.classList.remove("bg-success", "bg-danger", "text-white");

    // Th√™m m√†u ph√π h·ª£p
    if (type === "error") {
        toastElement.classList.add("bg-danger", "text-white"); // N·ªÅn ƒë·ªè, ch·ªØ tr·∫Øng
    } else {
        toastElement.classList.add("bg-success", "text-white"); // N·ªÅn xanh, ch·ªØ tr·∫Øng
    }

    toastBody.textContent = message;
    const toast = new bootstrap.Toast(toastElement);
    toast.show();
}

// Load ƒë·ª£t kh√°m
document.querySelectorAll('input[name="dotKhamFilter"]').forEach(radio => {
    radio.addEventListener('change', loadDotKham);
});

function loadDotKham() {
    const filterValue = document.querySelector('input[name="dotKhamFilter"]:checked').value;
    const list = document.getElementById("dotKhamList");
    list.innerHTML = "";

    db.collection("dot_kham").orderBy("createdAt", "desc").get().then(snapshot => {
        list.innerHTML = "";
        snapshot.forEach(doc => {
            const data = doc.data();
            const saveIdExam = doc.id;

            if (filterValue === "active" && !data.active) return;
            if (filterValue === "completed" && data.active) return;

            const li = document.createElement("li");
            li.classList.add("list-group-item");
            li.setAttribute("id", `dot_${doc.id}`);

            db.collection("accounts").doc(userSession.user.uid).get().then((accountDoc) => {
                let roleConfirm = (accountDoc.data().role == "admin" || accountDoc.data().role == "community");
                li.innerHTML = roleConfirm ? `<table border="0" class="w-100"><tbody><tr><td onclick="openDotKham('${saveIdExam}')" style="width:90%"><strong class="examName" onclick="openDotKham('${saveIdExam}')">${data.name}</strong> - ${data.date} 
                <span class="badge bg-${data.active ? 'success' : 'danger'} float-start me-1">${data.active ? 'Ho·∫°t ƒë·ªông' : 'Ho√†n th√†nh'}</span></td><td><button data-bs-toggle="tooltip" data-bs-placement="top" title="X√≥a" class="btn btn-sm btn-danger float-end ${accountDoc.data().role == "admin" ? '' : 'd-none'}" onclick="xoaDotKham('${saveIdExam}')" ><i class="fa-solid fa-trash"></i></button>
                <button data-bs-toggle="tooltip" data-bs-placement="top" title="Chuy·ªÉn tr·∫°ng th√°i" class="btn btn-sm btn-secondary float-end me-1" onclick="toggleStatus('${saveIdExam}', ${data.active})" ><i class="fa-solid fa-square-check"></i></button>
                <button data-bs-toggle="tooltip" data-bs-placement="top" title="S·ª≠a" class="btn btn-warning btn-sm float-end me-1" onclick="moModalSuaDotKham('${saveIdExam}', '${data.name}', '${data.date}')"><i class="fa-solid fa-pen-to-square"></i></button></td></tr></tbody></table>`
                    : `<table border="0" class="w-100"><tbody><tr><td onclick="openDotKham('${saveIdExam}')" style="width:90%"><strong class="examName" onclick="openDotKham('${saveIdExam}')">${data.name}</strong> - ${data.date} 
                <span class="badge bg-${data.active ? 'success' : 'danger'} float-start me-1">${data.active ? 'Ho·∫°t ƒë·ªông' : 'Ho√†n th√†nh'}</span></td></tr></tbody></table>`;
                list.appendChild(li);
            });
        });
    });
}

// Th√™m ƒë·ª£t kh√°m
function themDotKham() {
    const name = document.getElementById("dotKhamName").value.trim();
    const dateInput = document.getElementById("dotKhamDate").value;

    if (!name || !dateInput) {
        showToast("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
        return;
    }

    // Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y t·ª´ YYYY-MM-DD ‚Üí DD/MM/YYYY
    const dateParts = dateInput.split("-");
    const formattedDate = `${dateParts[2]}/${dateParts[1]}/${dateParts[0]}`;

    // Ki·ªÉm tra tr√πng t√™n & ng√†y tr∆∞·ªõc khi th√™m
    db.collection("dot_kham")
        .where("name", "==", name)
        .where("date", "==", formattedDate)
        .get()
        .then((querySnapshot) => {
            if (!querySnapshot.empty) {
                showToast("ƒê·ª£t kh√°m v·ªõi t√™n v√† ng√†y n√†y ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn t√™n/ng√†y kh√°c!");
                return;
            }

            // N·∫øu kh√¥ng tr√πng, th√™m v√†o Firestore
            db.collection("dot_kham").add({
                name,
                date: formattedDate,
                active: true,
                createdAt: firebase.firestore.FieldValue.serverTimestamp()
            }).then((docRef) => {
                showToast("ƒê√£ th√™m ƒë·ª£t kh√°m th√†nh c√¥ng!");
                document.getElementById("dotKhamName").value = "";
                document.getElementById("dotKhamDate").value = "";

                // ·∫®n modal
                var modal = bootstrap.Modal.getInstance(document.getElementById("addModal"));
                modal.hide();

                // üõ† Th√™m tr·ª±c ti·∫øp v√†o danh s√°ch
                db.collection("dot_kham").doc(docRef.id).get().then(doc => {
                    if (doc.exists) {
                        chenDotKhamVaoDanhSach(doc);
                    }
                });
            });
        })
        .catch(error => {
            console.error("L·ªói khi ki·ªÉm tra tr√πng t√™n v√† ng√†y:", error);
            showToast("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
        });
}

// Ch√®n v√†o kh√¥ng reload
function chenDotKhamVaoDanhSach(doc) {
    const data = doc.data();
    const saveIdExam = doc.id;
    const filterValue = document.querySelector('input[name="dotKhamFilter"]:checked').value;

    // N·∫øu b·ªô l·ªçc kh√¥ng ph√π h·ª£p v·ªõi tr·∫°ng th√°i c·ªßa ƒë·ª£t kh√°m, kh√¥ng ch√®n v√†o danh s√°ch
    if ((filterValue === "active" && !data.active) || (filterValue === "completed" && data.active)) {
        return;
    }

    const list = document.getElementById("dotKhamList");

    const li = document.createElement("li");
    li.classList.add("list-group-item");
    li.setAttribute("id", `dot_${doc.id}`);

    db.collection("accounts").doc(userSession.user.uid).get().then((accountDoc) => {
        let roleConfirm = (accountDoc.data().role == "admin" || accountDoc.data().role == "community");
        li.innerHTML = roleConfirm ? `<table border="0" class="w-100"><tbody><tr><td onclick="openDotKham('${saveIdExam}')" style="width:90%"><strong class="examName" onclick="openDotKham('${saveIdExam}')">${data.name}</strong> - ${data.date} 
                <span class="badge bg-${data.active ? 'success' : 'danger'} float-start me-1">${data.active ? 'Ho·∫°t ƒë·ªông' : 'Ho√†n th√†nh'}</span></td><td><button data-bs-toggle="tooltip" data-bs-placement="top" title="X√≥a" class="btn btn-sm btn-danger float-end ${accountDoc.data().role == "admin" ? '' : 'd-none'}" onclick="xoaDotKham('${saveIdExam}')" ><i class="fa-solid fa-trash"></i></button>
                <button data-bs-toggle="tooltip" data-bs-placement="top" title="Chuy·ªÉn tr·∫°ng th√°i" class="btn btn-sm btn-secondary float-end me-1" onclick="toggleStatus('${saveIdExam}', ${data.active})" ><i class="fa-solid fa-square-check"></i></button>
                <button data-bs-toggle="tooltip" data-bs-placement="top" title="S·ª≠a" class="btn btn-warning btn-sm float-end me-1" onclick="moModalSuaDotKham('${saveIdExam}', '${data.name}', '${data.date}')"><i class="fa-solid fa-pen-to-square"></i></button></td></tr></tbody></table>`
                    : `<table border="0" class="w-100"><tbody><tr><td onclick="openDotKham('${saveIdExam}')" style="width:90%"><strong class="examName" onclick="openDotKham('${saveIdExam}')">${data.name}</strong> - ${data.date} 
                <span class="badge bg-${data.active ? 'success' : 'danger'} float-start me-1">${data.active ? 'Ho·∫°t ƒë·ªông' : 'Ho√†n th√†nh'}</span></td></tr></tbody></table>`;
        list.prepend(li); // Ch√®n l√™n ƒë·∫ßu danh s√°ch
    });
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i
function toggleStatus(examId, currentStatus) {
    const newStatus = !currentStatus;
    db.collection("dot_kham").doc(examId).update({
        active: newStatus
    }).then(() => {
        showToast("ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
        // C·∫≠p nh·∫≠t tr·ª±c ti·∫øp UI
        capNhatTrangThaiUI(examId, newStatus);
    }).catch(error => {
        showToast(`L·ªói: ${error}`, "error");
    });
}

// C·∫≠p nh·∫≠t l·∫°i UI h√†m c·∫≠p nh·∫≠t
function capNhatTrangThaiUI(examId, newStatus) {
    const filterValue = document.querySelector('input[name="dotKhamFilter"]:checked').value;
    const listItem = document.getElementById(`dot_${examId}`);

    if (!listItem) return; // N·∫øu kh√¥ng t√¨m th·∫•y item, tho√°t lu√¥n

    // N·∫øu tr·∫°ng th√°i kh√¥ng kh·ªõp b·ªô l·ªçc, x√≥a kh·ªèi danh s√°ch
    if ((filterValue === "active" && !newStatus) || (filterValue === "completed" && newStatus)) {
        listItem.remove();
        return;
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i tr√™n UI
    const statusBadge = listItem.querySelector(".badge");
    statusBadge.classList.remove("bg-success", "bg-danger");
    statusBadge.classList.add(newStatus ? "bg-success" : "bg-danger");
    statusBadge.textContent = newStatus ? "Ho·∫°t ƒë·ªông" : "Ho√†n th√†nh";

    // C·∫≠p nh·∫≠t n√∫t toggle tr·∫°ng th√°i
    const toggleButton = listItem.querySelector(".btn-secondary");
    toggleButton.setAttribute("onclick", `toggleStatus('${examId}', ${newStatus})`);
}



let deletingExamId = null; // L∆∞u ID ƒë·ª£t kh√°m c·∫ßn x√≥a

// X√≥a ƒë·ª£t kh√°m
function xoaDotKham(id) {
    deletingExamId = id; // G√°n ID ƒë·ª£t kh√°m c·∫ßn x√≥a
    const deleteModal = new bootstrap.Modal(document.getElementById("confirmDeleteModal"));
    deleteModal.show(); // Hi·ªÉn th·ªã modal
}

// X·ª≠ l√Ω khi nh·∫•n n√∫t x√°c nh·∫≠n x√≥a
document.getElementById("confirmDeleteBtn").addEventListener("click", function () {
    if (deletingExamId) {
        const tempId = deletingExamId
        db.collection("dot_kham").doc(deletingExamId).delete().then(() => {
            showToast("ƒê√£ x√≥a ƒë·ª£t kh√°m th√†nh c√¥ng!");
            // xoaUpdateUI(deletingExamId); // C·∫≠p nh·∫≠t danh s√°ch
            const listItem = document.getElementById(`dot_${tempId}`);
            if (!listItem) return; // N·∫øu kh√¥ng t√¨m th·∫•y item, tho√°t lu√¥n
            listItem.remove()

        }).catch(error => {
            showToast(`L·ªói: ${error}`, "error");
        });
    }
    deletingExamId = null;
    const deleteModal = bootstrap.Modal.getInstance(document.getElementById("confirmDeleteModal"));
    deleteModal.hide(); // ·∫®n modal
});

// C·∫≠p nh·∫≠t ui x√≥a
function xoaUpdateUI(delItem) {
    console.log(delItem)
}

function openDotKham(id) {
    window.location.href = `./static/page/dotkham.html?id=${id}`;
}
loadDotKham();


// S·ª≠a ƒë·ª£t kh√°m
function moModalSuaDotKham(id, name, date) {
    document.getElementById("editDotKhamId").value = id;
    document.getElementById("editDotKhamName").value = name;
    document.getElementById("editDotKhamDate").value = date;

    var modal = new bootstrap.Modal(document.getElementById("editModal"));
    modal.show();
}

function capNhatDotKham() {
    const id = document.getElementById("editDotKhamId").value;
    const name = document.getElementById("editDotKhamName").value;
    const date = document.getElementById("editDotKhamDate").value;

    if (id && name && date) {
        db.collection("dot_kham").doc(id).update({
            name: name,
            date: date
        }).then(() => {
            showToast("C·∫≠p nh·∫≠t ƒë·ª£t kh√°m th√†nh c√¥ng!");
            var modal = bootstrap.Modal.getInstance(document.getElementById("editModal"));
            modal.hide();
        }).catch(error => {
            console.error("L·ªói c·∫≠p nh·∫≠t ƒë·ª£t kh√°m:", error);
            alert("L·ªói khi c·∫≠p nh·∫≠t ƒë·ª£t kh√°m!");
        });
    }
}

// L·ªçc ng√†y hi·ªán t·∫°i
document.addEventListener("DOMContentLoaded", function () {
    // L·∫•y ng√†y h√¥m nay
    const today = new Date();
    const yyyy = today.getFullYear();
    const mm = String(today.getMonth() + 1).padStart(2, "0"); // Th√°ng b·∫Øt ƒë·∫ßu t·ª´ 0 n√™n ph·∫£i +1
    const dd = String(today.getDate()).padStart(2, "0");

    const minDate = `${yyyy}-${mm}-${dd}`; // ƒê·ªãnh d·∫°ng YYYY-MM-DD

    // G√°n gi√° tr·ªã min cho input date
    document.getElementById("dotKhamDate").setAttribute("min", minDate);
});

